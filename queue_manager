'''
Crea un gestore delle code presso un ente pubblico. 
Il sistema deve creare una coda che permetta agli utenti di prendere il numeretto (da 1 a n) 
e agli operatori di sapere quanti utenti sono in coda, chiamare il prossimo utente e azzerare la coda.
se il sistema raggiunge il valore n allora ricomincia da 1.
Per il momento non usiamo gli oggetti ma solo funzioni. ti do qualche indicazione

ora devi fare un prompt di comandi che chieda all'utente quale azione fare, 
aggiungi utente, chiama il prossimo utente, ecc e di conseguenza modificherai la lista di attesa. 
fintantoché l'utente, premendo 0 (o altro carattere) non uscirà dal programma
'''

'''
Appunti:
- Gestire situazione in cui venga inserito inizialmente un numero negativo o una stringa? -> Gestione errori
- Fare il test pytest (vedi appunti)
- Provare stampa su file csv (come indicato al telefono)
- Creare interfaccia con i pulsanti in bootstrap?
'''

# Setup iniziale e verifica valore corretto
def initialize_queue():
    while True:  # Continua a chiedere finché non riceviamo un input valido
        try:
            max_users = int(input("Inserisci il numero massimo di utenti in coda: "))
            if max_users <= 0:
                print("Errore: Il valore deve essere un numero positivo. Riprova.")
                continue  # Ritorna all'inizio del ciclo
            return max_users  # Esce dalla funzione con il valore valido
        except ValueError:
            print("Errore: Devi inserire un numero intero. Riprova.") # Il ciclo continuerà automaticamente


# Funzione per generare un nuovo numero
def get_new_number():
  global start  # Con global vado a indicare che useremo una variabile esterne alla funzione
  start = start+1
  if start > max_users_number:  # Se start raggiunge il massimo, torna a 1
    start = 1
  users_queue.append(start) # Il numero di start viene aggiunto alla coda
  return start

# Funzione per chiamare il prossimo utente
def call_next_user():
  if len(users_queue) > 0: # Devo verificare se c'è qualcno in coda
    next_user = users_queue.pop(0) # Con la funzione pop rimuovo il primo della coda (Indice 0)
    return next_user
  else:
    return None # Se non ci sono utenti in attesa restituisce None

# Funzione per cntare gli utenti in coda
def count_users():
  return len(users_queue) # Conta quanti utenti sono attualmente in coda

# Funzione per azzerare la coda
def reset_queue():
  global start
  users_queue.clear()
  start = 0



# Mostra il menu delle opzioni disponibili
def show_menu(): 
    print("\n=== Sistema Gestione Code ===")
    print("1. Aggiungi utente alla coda")
    print("2. Chiama prossimo utente")
    print("3. Visualizza numero utenti in coda")
    print("4. Azzera la coda")
    print("0. Esci dal programma")
    print("===========================")

# Gestione input utente
def process_menu_choice():
    try:
        scelta = int(input("\nScegli un'opzione (0-4): "))
        
        if scelta == 0:
            print("Grazie per aver usato il sistema. Arrivederci!")
            return False  # Segnala che il programma deve terminare
            
        elif scelta == 1:
            nuovo_numero = get_new_number()
            print(f"Nuovo utente aggiunto con numero: {nuovo_numero}")
            
        elif scelta == 2:
            prossimo = call_next_user()
            if prossimo is not None:
                print(f"Chiamato utente numero: {prossimo}")
            else:
                print("Nessun utente in coda")
                
        elif scelta == 3:
            numero_utenti = count_users()
            print(f"Utenti attualmente in coda: {numero_utenti}")
            
        elif scelta == 4:
            reset_queue()
            print("La coda è stata azzerata")
            
        else:
            print("Opzione non valida. Scegli un numero tra 0 e 4")
            
        return True  # Segnala che il programma deve continuare
        
    except ValueError:
        print("Errore: devi inserire un numero valido")
        return True  # Continua nonostante l'errore

def main():
    """
    Funzione principale che gestisce il flusso del programma.
    """
    while True:
        show_menu()
        if not process_menu_choice():  # Se process_menu_choice restituisce False, terminiamo
            break

# Inizializziamo le variabili globali e avviamo il programma
max_users_number = initialize_queue()
start = 0
users_queue = []

# Avvio del programma
if __name__ == "__main__":
    main()